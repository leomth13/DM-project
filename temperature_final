import math
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
"""
Here is the full code for the temperature of the radiation in the early universe. You can manually change the constant gamma0 
to get the different results showed in the paper.
"""
#constants (GeV)
m_phi = 10**(9)
g_star = 100
g_mphi = 10**(-5)
g=m_phi*10**(-5)
mP=1.220890*10**(19)
mP_reduced=(1/np.sqrt(8*np.pi))*mP
gamma0=10**(-8)


#differential equations + temperature, gamma and H implementation
def inflaton_cst(X,t):
    phi,R=X
    Gamma=gamma0
    H=(8*math.pi/3)**(1/2)*(((m_phi)**2)/mP)*((R/t**4)+phi/t**3)**(1/2)
    T=(m_phi/t)*(30*R/((math.pi**2)*g_star))**(1/4)
    dphidt=-(Gamma/(H*t))*phi
    dRdt=(Gamma/H)*phi
    return dphidt,dRdt

def inflaton_dst(X,t):
    phi,R=X
    H=(8*math.pi/3)**(1/2)*(((m_phi)**2)/mP)*((R/t**4)+phi/t**3)**(1/2)
    T=(m_phi/t)*(30*R/((math.pi**2)*g_star))**(1/4)
    Gamma=gamma0*(1+2*(1/(np.exp(m_phi/(2*T))-1)))
    dphidt=-(Gamma/(H*t))*phi
    dRdt=(Gamma/H)*phi
    return dphidt,dRdt


#initial conditions and parameters
T0=0 #if unstable (too steep) with T0=0, you can try 0.0001*m_phi
x0=1
xmax=10**12
ndim=100000
phi0=10**20
R0=((math.pi**2)*g_star/30)*((T0*x0)/m_phi)**4 #R0 calculated from the temperature equation
X0=phi0,R0
x=np.logspace(np.log10(x0),np.log10(xmax), ndim)

#computing and extracting solutions for the constant model
sol_cst=odeint(inflaton_cst,X0,x)
sol_cst_T= sol_cst.T
Solphi_cst=sol_cst_T[0]
SolR_cst=sol_cst_T[1]

#solutions for the model with the Bose-Einstein distribution
sol_dst=odeint(inflaton_dst,X0,x)
sol_dst_T=sol_dst.T
Solphi_dst=sol_dst_T[0]
SolR_dst=sol_dst_T[1]

#Temperature construction
Temp_cst=np.zeros(ndim)
for i in range(np.shape(Temp_cst)[0]):
    if i ==0:
        Temp_cst[0]=T0/m_phi
    else:
        Temp_cst[i]=((m_phi/x[i])*((30/g_star/math.pi**2)*SolR_cst[i])**(1/4))/m_phi

Temp_dst=np.zeros(ndim)
for i in range(np.shape(Temp_dst)[0]):
    if i==0:
        Temp_dst[0]=T0/m_phi
    else:
        Temp_dst[i]=((m_phi/x[i])*((30/g_star/math.pi**2)*SolR_dst[i])**(1/4))/m_phi

#Check for maximal values
print(np.max(Temp_cst),np.max(Temp_dst))

#Definiton of Tmax and Tr
Tmax= 0.6*(gamma0*mP/g_star)**(1/4)*(3/4*phi0*m_phi**4)**(1/8)
Tr=np.sqrt(gamma0*mP)*(90/(8*np.pi**3*g_star))**(1/4)

#Temperature plot
plt.figure()
plt.xlim(0.95,xmax) #0.95 is an experimental value, it's a bit easier to see the behavior of the temperature at the beginning with this value but it can be changed to 1
plt.ylim(10**(-5),10)
plt.title('T/m_phi in function of x')
plt.xscale('log')
plt.yscale('log')
plt.xlabel('x')
plt.ylabel('T/m_phi')
plt.axhline(Tmax/m_phi,linestyle='dashed',color='black',label='T_max')
plt.axhline(Tr/m_phi,linestyle='dashed',color='black',label='T_R')
plt.plot(x,Temp_cst, color ='red',label='Gamma constant')
plt.plot(x,Temp_dst,'--',color='blue',label='Gamma w/ B-E distribution')
plt.legend()
plt.show()
